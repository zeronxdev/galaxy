var KTUsersUpdateEmail = (function () {
  let e = document.getElementById("zero_modal_user_update_email"),
    t = e.querySelector("#zero_modal_user_update_email_form");
  new bootstrap.Modal(e);
  var s = () => {
    var s = FormValidation.formValidation(t, {
      fields: {
        profile_email: {
          validators: {
            notEmpty: { message: i18next.t("email address is required") },
            emailAddress: {
              message: i18next.t("the value is not a valid email address"),
            },
          },
        },
      },
      plugins: {
        trigger: new FormValidation.plugins.Trigger(),
        bootstrap: new FormValidation.plugins.Bootstrap5({
          rowSelector: ".fv-row",
          eleInvalidClass: "",
          eleValidClass: "",
        }),
      },
    });
    let a = e.querySelector('[data-kt-users-modal-action="submit"]');
    a.addEventListener("click", function (e) {
      e.preventDefault(),
        s &&
          s.validate().then(function (e) {
            console.log("validated!"),
              "Valid" == e &&
                (a.setAttribute("data-kt-indicator", "on"),
                (a.disabled = !0),
                setTimeout(function () {
                  $.ajax({
                    type: "POST",
                    url: "/user/update_profile/email",
                    dataType: "json",
                    data: { newemail: $("#profile_email").val() },
                    success: function (e) {
                      1 === e.ret
                        ? Swal.fire({
                            text: e.msg,
                            icon: "success",
                            buttonsStyling: !1,
                            confirmButtonText: "OK",
                            customClass: { confirmButton: "btn btn-primary" },
                          }).then(function (e) {
                            e.isConfirmed && location.reload();
                          })
                        : (getResult(e.msg, "", "error"),
                          a.removeAttribute("data-kt-indicator"),
                          (a.disabled = !1));
                    },
                  });
                }, 2e3));
          });
    });
  };
  return {
    init: function () {
      s();
    },
  };
})();
KTUtil.onDOMContentLoaded(function () {
  KTUsersUpdateEmail.init();
});
var KTUsersUpdatePassword = (function () {
  let e = document.getElementById("zero_modal_user_update_password"),
    t = e.querySelector("#zero_modal_user_update_password_form"),
    s = new bootstrap.Modal(e);
  var a = () => {
    var a = FormValidation.formValidation(t, {
      fields: {
        current_password: {
          validators: {
            notEmpty: { message: i18next.t("password is required") },
          },
        },
        password: {
          validators: {
            notEmpty: { message: i18next.t("password is required") },
            callback: {
              message: i18next.t("please enter valid password"),
              callback: function (e) {
                if (e.value.length > 0) return validatePassword();
              },
            },
          },
        },
        confirm_password: {
          validators: {
            notEmpty: {
              message: i18next.t("password confirmation is required"),
            },
            identical: {
              compare: function () {
                return t.querySelector('[name="new_password"]').value;
              },
              message: i18next.t("password and its confirm are not the same"),
            },
          },
        },
      },
      plugins: {
        trigger: new FormValidation.plugins.Trigger(),
        bootstrap: new FormValidation.plugins.Bootstrap5({
          rowSelector: ".fv-row",
          eleInvalidClass: "",
          eleValidClass: "",
        }),
      },
    });
    let r = e.querySelector('[data-kt-users-modal-action="submit"]');
    r.addEventListener("click", function (e) {
      e.preventDefault(),
        a &&
          a.validate().then(function (e) {
            console.log("validated!"),
              "Valid" == e &&
                (r.setAttribute("data-kt-indicator", "on"),
                (r.disabled = !0),
                setTimeout(function () {
                  $.ajax({
                    type: "POST",
                    url: "/user/update_profile/password",
                    dataType: "json",
                    data: {
                      current_password: $("#current_password").val(),
                      new_password: $("#new_password").val(),
                    },
                    success: function (e) {
                      1 === e.ret
                        ? Swal.fire({
                            text: e.msg,
                            icon: "success",
                            buttonsStyling: !1,
                            confirmButtonText: "OK, got it!",
                            customClass: { confirmButton: "btn btn-primary" },
                          }).then(function (e) {
                            e.isConfirmed && (s.hide(), location.reload());
                          })
                        : (getResult(e.msg, "", "error"),
                          r.removeAttribute("data-kt-indicator"),
                          (r.disabled = !1));
                    },
                  });
                }, 2e3));
          });
    });
  };
  return {
    init: function () {
      a();
    },
  };
})();
function KTUsersEnableNotify(e) {
  if (document.getElementById("notify_email").checked) var t = e;
  else if (document.getElementById("notify_telegram").checked) var t = e;
  $.ajax({
    type: "POST",
    url: "/user/enable_notify",
    dataType: "json",
    data: { notify_type: t },
    success: function (e) {},
  });
}
function KTUsersResetPasswd() {
  $.ajax({
    type: "POST",
    url: "/user/update_profile/passwd",
    dataType: "json",
    data: {},
    success: function (e) {
      1 === e.ret
        ? Swal.fire({
            text: e.msg,
            icon: "success",
            buttonsStyling: !1,
            confirmButtonText: "OK",
            customClass: { confirmButton: "btn btn-primary" },
          }).then(function (e) {
            e.isConfirmed && location.reload();
          })
        : getResult(e.msg, "", "error");
    },
  });
}
function KTUsersResetUUID() {
  $.ajax({
    type: "POST",
    url: "/user/update_profile/uuid",
    dataType: "json",
    data: {},
    success: function (e) {
      1 === e.ret
        ? Swal.fire({
            text: e.msg,
            icon: "success",
            buttonsStyling: !1,
            confirmButtonText: "OK",
            customClass: { confirmButton: "btn btn-primary" },
          }).then(function (e) {
            e.isConfirmed && location.reload();
          })
        : getResult(e.msg, "", "error");
    },
  });
}
function KTUsersResetSubLink() {
  $.ajax({
    type: "POST",
    url: "/user/update_profile/sub_token",
    dataType: "json",
    data: {},
    success: function (e) {
      1 === e.ret
        ? Swal.fire({
            text: e.msg,
            icon: "success",
            buttonsStyling: !1,
            confirmButtonText: "OK",
            customClass: { confirmButton: "btn btn-primary" },
          }).then(function (e) {
            e.isConfirmed && location.reload();
          })
        : getResult(e.msg, "", "error");
    },
  });
}
KTUtil.onDOMContentLoaded(function () {
  KTUsersUpdatePassword.init();
});
