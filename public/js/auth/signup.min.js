"use strict";
var KTSignupGeneral = (function () {
  var e,
    t,
    r,
    a,
    i = function (i) {
      (r = FormValidation.formValidation(e, {
        fields: {
          email: {
            validators: {
              regexp: {
                regexp: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                message: i18next.t("the value is not a valid email address"),
              },
              notEmpty: { message: i18next.t("email address is required") },
            },
          },
          password: {
            validators: {
              notEmpty: { message: i18next.t("password is required") },
              callback: {
                message: i18next.t("please enter valid password"),
                callback: function (e) {
                  if (e.value.length < 8) return s();
                },
              },
            },
          },
          "confirm-password": {
            validators: {
              notEmpty: {
                message: i18next.t("password confirmation is required"),
              },
              identical: {
                compare: function () {
                  return e.querySelector('[name="password"]').value;
                },
                message: i18next.t("password and its confirm are not the same"),
              },
            },
          },
        },
        plugins: {
          trigger: new FormValidation.plugins.Trigger({
            event: { password: !1 },
          }),
          bootstrap: new FormValidation.plugins.Bootstrap5({
            rowSelector: ".fv-row",
            eleInvalidClass: "",
            eleValidClass: "",
          }),
        },
      })),
        t.addEventListener("click", function (i) {
          if (
            (i.preventDefault(),
            r.revalidateField("password"),
            !0 == $("div").is(".cf-turnstile"))
          )
            var s = {
              email: $("#email").val(),
              passwd: $("#passwd").val(),
              repasswd: $("#repasswd").val(),
              code: $("#referral_code").val(),
              turnstile: turnstile.getResponse(),
            };
          else
            s = {
              email: $("#email").val(),
              passwd: $("#passwd").val(),
              repasswd: $("#repasswd").val(),
              code: $("#referral_code").val(),
            };
          r.validate().then(function (r) {
            "Valid" == r
              ? (t.setAttribute("data-kt-indicator", "on"),
                (t.disabled = !0),
                setTimeout(function () {
                  $.ajax({
                    method: "POST",
                    url: "/auth/signup",
                    dataType: "json",
                    data: s,
                    success: function (r) {
                      1 == r.ret
                        ? Swal.fire({
                            text: r.msg,
                            icon: "success",
                            buttonsStyling: !1,
                            confirmButtonText: "OK",
                            customClass: { confirmButton: "btn btn-primary" },
                          }).then(function (t) {
                            if (t.isConfirmed) {
                              e.reset(), a.reset();
                              var r = e.getAttribute("data-kt-redirect-url");
                              r && (location.href = r);
                            }
                          })
                        : (Swal.fire({
                            text: r.msg,
                            icon: "error",
                            buttonsStyling: !1,
                            confirmButtonText: "OK",
                            customClass: { confirmButton: "btn btn-primary" },
                          }),
                          t.removeAttribute("data-kt-indicator"),
                          (t.disabled = !1));
                    },
                  });
                }, 1500))
              : Swal.fire({
                  text: i18next.t("Đã phát hiện một số lỗi, vui lòng thử lại"),
                  icon: "error",
                  buttonsStyling: !1,
                  confirmButtonText: "OK, got it!",
                  customClass: { confirmButton: "btn btn-primary" },
                });
          });
        }),
        e
          .querySelector('input[name="password"]')
          .addEventListener("input", function () {
            this.value.length < 8 &&
              r.updateFieldStatus("password", "NotValidated");
          });
    },
    s = function () {
      return 100 === a.getScore();
    };
  return {
    init: function () {
      (e = document.querySelector("#kt_sign_up_form")),
        (t = document.querySelector("#kt_sign_up_submit")),
        (a = KTPasswordMeter.getInstance(
          e.querySelector('[data-kt-password-meter="true"]')
        )),
        i();
    },
  };
})();
function getQueryVariable(e) {
  for (
    var t = window.location.search.substring(1).split("&"), r = 0;
    r < t.length;
    r++
  ) {
    var a = t[r].split("=");
    if (a[0] == e) return a[1];
  }
  return "";
}
function setCookie(e, t, r) {
  var a = new Date();
  a.setTime(a.getTime() + 864e5 * r);
  var i = "expires=" + a.toGMTString();
  document.cookie = e + "=" + t + "; " + i;
}
function getCookie(e) {
  for (
    var t = e + "=", r = document.cookie.split(";"), a = 0;
    a < r.length;
    a++
  ) {
    var i = r[a].trim();
    if (0 == i.indexOf(t)) return i.substring(t.length, i.length);
  }
  return "";
}
KTUtil.onDOMContentLoaded(function () {
  KTSignupGeneral.init();
}),
  "" != getQueryVariable("code") &&
    (setCookie("code", getQueryVariable("code"), 30),
    (window.location.href = "/auth/signup")),
  "" != getCookie("code") && $("#referral_code").val(getCookie("code"));
